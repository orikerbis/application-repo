name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - develop

jobs:

  build-and-push-frontend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write 
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY_FRONTEND: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
            IMAGE_TAG: ${{ github.sha }} 
        run: |
          docker buildx build --platform linux/amd64 --push -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ env.IMAGE_TAG }} -f ./client/Dockerfile ./client

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: build-and-push-frontend
    permissions:
      id-token: write 
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY_BACKEND: ${{ secrets.ECR_REPOSITORY_BACKEND }}
            IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --platform linux/amd64 --push -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ env.IMAGE_TAG }} -f ./server/Dockerfile ./server
    
  update-image-tag-frontend:
        needs: [build-and-push-frontend, build-and-push-backend]
        runs-on: ubuntu-latest
        steps:
          - name: GitOps - Update Image Tag
            uses: adwert-it/gitops-image-update@v1
            with:
              REPOSITORY_NAME: 'orikerbis/employee-gitops'
              ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
              BRANCH: "main"
              VALUES_FILE_PATH: 'environments/dev/values.yaml'
              VALUE_NAME: 'client.image.tag'
              TAG: '${{ github.sha }}' 
  update-image-tag-backend:
        needs: [build-and-push-frontend, build-and-push-backend]
        runs-on: ubuntu-latest
        steps:
          - name: GitOps - Update Image Tag
            uses: adwert-it/gitops-image-update@v1
            with:
              REPOSITORY_NAME: 'orikerbis/employee-gitops'
              ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
              BRANCH: "main"
              VALUES_FILE_PATH: 'environments/dev/values.yaml'
              VALUE_NAME: 'server.image.tag'
              TAG: '${{ github.sha }}'